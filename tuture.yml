name: Django + Nuxt 实现美食分享网站
id: b9b4d831629e9a7df36131b1661569eb
github: 'https://github.com/mRcfps/recipes_app'
created: '2019-10-18T00:00:00.509Z'
updated: 2019-11-30T11:10:14.466Z
topics:
  - Django
  - Vue
  - Nuxt
categories:
  - 后端
  - Python
  - 进阶
splits:
  - name: Django + Nuxt 实现美食分享网站（一）
    description: >-
      Django 作为 Python 社区最受欢迎的 Web 框架之一，凭借其高度抽象的组件和强大方便的脚手架，将快速且流畅的开发体验演绎到了极致。而
      Nuxt 作为从 Vue.js 进化而来的前端框架，能够轻松胜任复杂的 SPA（单页应用）开发。两者相遇，能够擦出怎样的火花？这篇教程将用
      Django + Nuxt 实现带有完整的增删改查（CRUD）功能的全栈应用。最后郑重警告：不要在深夜阅读此教程！！！
    start: c64b3b6
    end: 63f7ab0
  - name: Django + Nuxt 实现美食分享网站（二）
    description: >-
      在本教程的上一部分中，我们分别用 Django 和 Nuxt
      实现了后端和前端的雏形。在这一部分，我们将实现前后端之间的通信，使得前端可以从后端获取数据，并且将进一步丰富网站的功能。
    start: 60a60d7
    end: 04edf4c
steps:
  - name: 项目初始化
    commit: c64b3b6
    diff:
      - file: Pipfile
        display: true
        explain:
          pre: 这时 pipenv 便产生了 Pipfile 文件，它的作用就类似 Node 项目中的 package.json 文件：
      - file: api/api/__init__.py
        display: false
      - file: api/api/settings.py
        display: false
      - file: api/api/urls.py
        display: false
      - file: api/api/wsgi.py
        display: false
      - file: api/core/__init__.py
        display: false
      - file: api/core/admin.py
        display: false
      - file: api/core/apps.py
        display: false
      - file: api/core/migrations/__init__.py
        display: false
      - file: api/core/models.py
        display: false
      - file: api/core/tests.py
        display: false
      - file: api/core/views.py
        display: false
      - file: api/manage.py
        display: false
    explain:
      post: >-
        然后用 Django 脚手架创建服务器项目 `api` 的基本结构，并进入到 `api`创建一个子应用 `core`：


        ```bash

        (recipes_app-nV3wuGJ1) $ django-admin startproject api

        (recipes_app-nV3wuGJ1) $ cd api

        (recipes_app-nV3wuGJ1) $ python manage.py startapp core

        ```


        接着进行数据库迁移，并创建用于登录后台管理的超级用户：


        ```bash

        (recipes_app-nV3wuGJ1) $ python manage.py migrate

        (recipes_app-nV3wuGJ1) $ python manage.py createsuperuser

        ```


        按照问题输入信息即可。要记住用户名和密码哦！然后运行开发服务器：


        ```bash

        (recipes_app-nV3wuGJ1) $ python manage.py runserver

        ```


        访问
        [http://localhost:8000/admin](http://localhost:8000/admin)，可以看到后台管理的登录页面。输入刚才创建的超级用户的用户名和密码，就进入了后台管理系统，如下所示：


        ![](tuture-assets/django-admin.png)


        熟悉的界面，但是——没什么东西，而且全是英文！别担心，后面我们会一个个搞定。
      pre: >-
        在这一系列教程中，我们将会实现一个全栈美食分享网站，后端用 Django 实现，前端则是 Nuxt 框架，下面是最终完成后的项目效果：


        ![](tuture-assets/demo.gif)


        ### 预备知识


        本教程假定你已经知道了


        - 基本的 Python 3 语言知识，包括使用 pip 安装包

        - Django 框架的基础概念（MTV
        架构），可参考这篇[快速入门教程](https://tuture.co/2019/11/19/55d393c/)进行学习

        - Vue 的基础概念，以及用 npm
        工具链的使用，可参考[这篇教程](https://tuture.co/2019/10/17/0b662ce/)

        - 前后端分离的基本概念，包括前端如何通过发起 HTTP(S) 请求从后端获取数据


        ### 学习目标


        学完这篇教程后，你将：


        - 了解用 pipenv 工具管理 Python 依赖

        - 学会用 Django REST Framework 快速开发 REST API

        - 学会用 Nuxt 框架快速开发 SPA（单页应用），能够从后端获取数据并渲染


        ### 用 pipenv 初始化 Python 环境


        首先创建项目目录，并进入：


        ```bash

        $ mkdir recipes_app && cd recipes_app

        ```


        在这个项目中，我们用 [pipenv](https://pipenv.kennethreitz.org/) 来管理 Python
        项目的环境依赖。Pipenv 是 Python 社区偶像级大师 Kenneth Reitz
        牵头开发的开发流程优化工具，立志集所有项目管理工具（Node 的 npm、Ruby 的 bundler、PHP 的 composer
        等等）的优势为一体。我们通过下面的命令安装 pipenv，并创建项目的依赖环境：


        ```bash

        $ pip install pipenv

        $ pipenv shell

        ```


        如果看到命令提示符前面出现 `(recipes_app-nV3wuGJ1)`
        的提示（后面那串随机字符串可能不一样），就表明我们已经成功地创建了项目独有的虚拟环境！我们接着安装 Django “三件套”：


        - **Django**: Django 框架本身，提供了丰富且强大的服务器开发组件；

        - **DRF (Django Rest Framework)**：Django 框架的超级搭档，大大方便了 REST API 的开发；

        - **Django CORS Headers**：用于实现跨域资源请求（CORS）的 Django 中间件（如果你不了解
        CORS，可以参考阮一峰的[日志](http://www.ruanyifeng.com/blog/2016/04/cors.html)）。


        安装命令如下：


        ```bash

        (recipes_app-nV3wuGJ1) $ pipenv install django django-rest-framework
        django-cors-headers

        ```
  - name: 用 Django 实现 REST API
    commit: d4d056f
    diff:
      - file: .editorconfig
        display: false
      - file: .gitignore
      - file: api/api/settings.py
        display: true
        explain:
          pre: >-
            ### 全局配置


            首先，在全局配置文件 settings.py 中做如下改动：


            1. 在 `INSTALLED_APPS` 中添加 `rest_framework`、`corsheaders` 和
            `core`，前两个分别是 Django Rest Framework 和 Django CORS Headers
            的应用，最后一个是我们网站的应用；

            2. 在 `MIDDLEWARE` 中添加
            `corsheaders.middleware.CorsMiddleware`，注册跨域请求中间件（**注意一定要放在最前面！**）;

            3. 设置 `CORS_ORIGIN_WHITELIST`，添加跨域请求白名单，这里我们先写上
            `http://localhost:3000`，后面开发前端时将用到；

            4. 设置 `LANGUAGE_CODE` 为 `zh-hans`，可以将后台管理设置为中文，非常方便；

            5. 设置 `MEDIA_URL` 和 `MEDIA_ROOT`，用于在开发中提供图片资源文件的访问。


            具体代码如下：
      - file: api/core/models.py
        display: true
        explain:
          pre: >-
            ### 实现 core 应用


            接下来就是实现 `core` 这个 Django 应用。实现一个 Django 应用大致都是按照这样的流程：


            1. 定义数据模型（models.py），用于实现和数据库之间的绑定；

            2. 定义后台管理配置（admin.py），用于在后台管理系统中进行操作；

            3. 定义序列化器（serializers.py），*仅当实现 REST API 时需要*，用于提供数据模型的 JSON
            序列化（或其他数据交换格式）；

            4. 定义视图（views.py），用于实现具体的业务逻辑；

            5. 定义路由（urls.py），用于定义路由规则，将其映射到相应的视图；

            6. 将应用路由接入全局路由文件（api/urls.py）中。


            我们从第一步开始，完成菜谱 `Recipe` 数据模型如下：
          post: >-
            其中，`class Meta` 定义了 `Recipe` 的元数据；`__str__`
            方法定义了一个菜谱对象转换为字符串时应该怎样显示。这些设置的作用在打开后台管理系统之后就会很清晰了。想要了解更多关于 Django
            数据模型的知识，请参考相关[中文文档](https://docs.djangoproject.com/zh-hans/2.2/topics/db/models/)。
      - file: api/core/admin.py
        display: true
        explain:
          pre: 第二步，为 `core` 子应用配置相应的后台管理功能。非常简单，只需注册定义好的 `Recipe` 模型：
      - file: api/core/serializers.py
        display: true
        explain:
          pre: >-
            第三步，定义序列化器 serializers.py（脚手架并不会自动创建，需要手动创建）。序列化器是 Django Rest
            Framework 提供的功能，能够非常方便地将 Django 数据模型序列化成相应的 JSON 数据格式。在这里，我们定义一个
            `RecipeSerializer`，并在 `class Meta` 中指定对应的数据模型为刚才创建的
            `Recipe`，并选择相应的字段展示：
      - file: api/core/views.py
        display: true
        explain:
          pre: >-
            第四步，实现视图。这里我们采用开挂模式，直接调用 Django Rest Framework
            提供的模型视图集（`ModelViewset`）直接搞定数据模型的增删改查逻辑：
          post: >-
            只需指定 `serializer_class`（序列器类）和
            `queryset`（模型查询集），就自动定义好了模型的添加、删除、查询和修改！虽然视图集非常强大，但是如果要实现更加灵活的业务逻辑，那么还是要为每个接口定义单独的视图类才行。
      - file: api/core/urls.py
        display: true
        explain:
          pre: >-
            第五步，实现路由。由于我们上一步使用了视图集，因此只需先调用 `DefaultRouter`
            自动生成相关的路由，然后加入记录路由映射的列表 `urlpatterns` 中：
          post: |-
            `router` 为我们自动生成以下路由：

            - `/recipes/`：创建食谱（POST 方法）或读取食谱列表（GET方法）；
            - `/recipes/{id}`：获取单个食谱（GET）、更新单个食谱（PUT）或删除食谱（DELETE）。


            ::: warning
            **注意**

            在 Django 路由定义中不包括 HTTP 方法，具体的 HTTP 方法可以在视图中读取并判断。
            :::
      - file: api/api/urls.py
        display: true
        explain:
          pre: 最后一步，我们将 `core` 子应用中的路由接入全局路由：
      - file: api/core/migrations/0001_initial.py
        display: false
      - file: tuture.yml
    explain:
      pre: >-
        接下来我们将实现本项目所需要用的所有 API。对，你没有听错，我们会在这一步实现所有后端接口，大概只 10 分钟左右可以敲完！这就是
        Django 的宣言：


        > The web framework for perfectionists with deadlines.


        “为赶时间的完美主义者而生！”
      post: >-
        没错，关于食谱的增删改查的 API 我们全都实现了！不信？先运行开发服务器：


        ```bash

        (recipes_app-nV3wuGJ1) $ python manage.py runserver

        ```


        由于 Django REST Framework 为我们提供了测试 API 的 Web 界面，因此这里就不用 Postman
        等工具进行测试了。用浏览器访问
        [localhost:8000/api/recipes](localhost:8000/api/recipes)，就进入了如下所示的 API
        测试页面：


        ![](tuture-assets/image.png)


        这个页面的下方还有添加数据（发起 POST 请求）的表单，我们填一些数据，然后点击 POST 按钮：


        ![](tuture-assets/image-f3d22507493bf44a.png)


        然后再次访问食谱列表页面，就有我们刚刚添加的食谱了！此外，你还可以尝试访问单个食谱的详情页面（例如
        [localhost:8000/api/recipes/1](localhost:8000/api/recipes/1)），并且可以通过 Web
        页面直接修改或删除哦！
  - name: 用 Nuxt.js 实现网站首页
    commit: 596203d
    diff:
      - file: client/.editorconfig
        display: false
      - file: client/.gitignore
        display: false
      - file: client/README.md
        display: false
      - file: client/assets/README.md
        display: false
      - file: client/components/Logo.vue
        display: false
      - file: client/components/README.md
        display: false
      - file: client/layouts/README.md
        display: false
      - file: client/layouts/default.vue
        display: false
      - file: client/middleware/README.md
        display: false
      - file: client/nuxt.config.js
        display: false
      - file: client/package.json
        display: false
      - file: client/pages/README.md
        display: false
      - file: client/pages/index.vue
        display: true
        explain:
          pre: |-
            ### 编写前端首页

            我们在 client/pages 中创建 index.vue 文件，并在其中实现我们的前端首页：
          post: 模板（Template）+ 脚本（Script）+ 样式（Style），经典的 Vue.js 组件。
      - file: client/pages/recipes/_id/edit.vue
        display: false
      - file: client/pages/recipes/_id/index.vue
        display: false
      - file: client/pages/recipes/add.vue
        display: false
      - file: client/pages/recipes/index.vue
        display: false
      - file: client/plugins/README.md
        display: false
      - file: client/static/README.md
        display: false
      - file: client/static/favicon.ico
        display: false
      - file: client/static/icon.png
        display: false
      - file: client/static/images/banner.jpg
        display: false
      - file: client/store/README.md
        display: false
      - file: client/yarn.lock
        display: false
      - file: tuture.yml
    explain:
      post: >-
        我们刚刚创建了 pages 目录下的 index.vue 文件，这意味着当访问根路由 `/` 时，这个文件将被访问到。通过 `npm run
        dev`运行我们的前端页面（***记得在 client 子目录下运行！***），可以看到：


        ![](tuture-assets/index-page.jpg)


        真是让人食欲大开！
      pre: >-
        Django 的 MTV 架构固然优秀，但是随着现在的业务逻辑越来越多地向前端倾斜（也就是现在流行的**富前端应用**），其中的
        T（Template）需要更强大的武器来解决，这里就是我们的第二位主角 Nuxt。


        ### 用脚手架初始化 Nuxt 项目


        我们将把所有的前端代码放到 client 目录中，不过无需自己创建，我们调用 nuxt 的脚手架来创建前端应用：


        ```bash

        $ npx create-nuxt-app client

        ```


        之后脚手架应用会询问一系列问题，按下面的截图进行选择（当然作者名填自己）：


        ![](tuture-assets/create-nuxt-app.jpg)


        我们对 Nuxt 脚手架生成的目录结构稍作讲解。可以看到 client 目录下有以下子目录：


        - assets：存放图片、CSS、JS 等原始资源文件

        - components：存放 Vue 组件

        - layouts：存放应用布局文件，布局可在多个页面中使用

        - middleware：存放应用的中间件。Nuxt 中的中间件指页面渲染前执行的自定义函数（本教程中不需要）

        - pages：应用的视图和路由。Nuxt 会根据此目录中的 `.vue` 文件自动创建应用的路由

        - plugins: 存放 JavaScript 插件，用于在应用启动前加载（本教程中不需要）

        - static：存放通常不会改变的静态文件，并且将直接映射到路由（即可通过 `/static/picture.png` 访问）

        - store：存放 Vuex Store 文件（本教程中不需要）


        本项目所用到的图片资源请访问我的 [GitHub
        仓库](https://github.com/mRcfps/recipes_app/tree/master/client/static/images)，并下载到对应的目录中。
  - name: 数据展示：实现食谱列表
    commit: 63f7ab0
    diff:
      - file: client/components/RecipeCard.vue
        display: true
        explain:
          pre: |-
            ### 实现 RecipeCard 组件

            首先，实现将会在多个页面中反复使用的食谱卡片组件 `RecipeCard` 如下：
          post: >-
            在这个组件中，我们定义了两个 `props`，分别是 `recipe`（代表食谱对象）和
            `onDelete`（删除时的回调函数），并在模板中使用这两个成员。
      - file: client/pages/recipes/index.vue
        display: true
        explain:
          pre: "### 了解 Nuxt 的路由功能\n\n在实现第二个页面之前，我们有必要先了解一下 Nuxt 的路由功能——通过 pages 目录下的文档结构，就可以自动生成 vue-router 的路由器配置！\n\n例如我们这样安排 pages 下面的目录结构\U0001F447：\n\n```text\npages\n├── README.md\n├── index.vue\n└── recipes\n    ├── _id\n    │   ├── edit.vue\n    │   └── index.vue\n    ├── add.vue\n    └── index.vue\n```\n\n`_id` 目录（或者其他以单下划线开头的目录或 .vue 文件）被称作是**动态路由**（Dynamic Routing），可以接受参数作为 URL 的一部分。上面的 pages 目录自动生成下面的 `router`：\n\n```js\nrouter: {\n  routes: [\n    {\n      name: 'index',\n      path: '/',\n      component: 'pages/index.vue'\n    },\n    {\n      name: 'recipes',\n      path: '/recipes',\n      component: 'pages/recipes/index.vue'\n    },\n    {\n      name: 'recipes-add',\n      path: '/recipes/add',\n      component: 'pages/recipes/add.vue'\n    },\n    {\n      name: 'recipes-id',\n      path: '/recipes/:id?',\n      component: 'pages/recipes/_id/index.vue'\n    },\n    {\n      name: 'recipes-id-edit',\n      path: '/recipes/:id?/edit',\n      component: 'pages/recipes/_id/edit.vue'\n    }\n  ]\n}\n```\n\n\n::: info\n**提示**\n\n如果想要更深入地了解 Nuxt 的路由功能，请参考[官方文档](https://nuxtjs.org/guide/routing)。\n:::\n\n### 实现食谱列表页面\n\n创建食谱列表页面 pages/recipes/index.vue（先使用假数据填充），代码如下："
          post: ''
      - file: client/static/images/food-1.jpeg
        display: false
      - file: client/static/images/food-2.jpeg
        display: false
      - file: tuture.yml
    explain:
      pre: 接下来我们将演示如何展示数据，并实现食谱列表页面。
      post: >-
        打开前端网站，可以看到我们刚才实现的食谱列表页面：


        ![](tuture-assets/recipe-list-fake.jpg)


        到这儿，我们分别实现了这个全栈食谱网站的前端和后端应用，这篇教程的第一部分也就结束了。在接下来的教程中，我们将实现前后端之间的通信，并进一步实现食谱的详情及添加页面，不见不散！
  - name: 从服务器获取数据
    commit: 60a60d7
    diff:
      - file: api/api/urls.py
        display: true
        explain:
          pre: |-
            ### 配置 Django 的静态文件服务

            首先我们要配置一下 Django 服务器，使前端能够访问其静态文件。调整 api/api/urls.py 文件如下：
          post: >-

            ::: warning

            **注意**


            这样配置静态文件路由的方式仅应当在**开发环境**下使用。在生产环境下（settings.py 中的 `DEBUG` 设为
            `False` 时），静态文件路由将自动失效（因为 Django 并不适合作为静态文件服务器，应该选用类似 Nginx
            之类的服务器，在后续教程中我们将更深入地讨论）。

            :::
      - file: client/nuxt.config.js
        display: true
        explain:
          pre: >-
            ### 实现前端的数据请求功能


            在客户端，我们先要对 Nuxt 进行全局配置。Nuxt 包括
            [axios](https://github.com/axios/axios) 包，这是一个非常出色的基于 Promise 的 HTTP
            请求库。在 nuxt.config.js 中的 `axios` 一项中添加 Django 服务器的 URL：
      - file: client/pages/recipes/index.vue
        display: true
        explain:
          pre: >-
            将食谱列表页面中暂时填充的假数据删去，通过 `asyncData` 方法获取数据。由于我们之前配置好了 axios，所以
            `asyncData` 函数可以获取到 `$axios` 对象用于发起 HTTP 请求。我们实现页面加载的数据获取以及
            `deleteRecipe` 事件，代码如下：
      - file: client/pages/recipes/_id/index.vue
        display: true
        explain:
          pre: |-
            ### 实现食谱详情页面

            我们进一步实现食谱详情页面。在 pages/recipes 目录中创建 _id 目录，在其中添加 index.vue 文件，代码如下：
    explain:
      pre: 在这一部分，我们将真正实现一个全栈应用——让前端能够向后端发起请求，从而获取想要的数据。
      post: >-
        为了测试前端页面能否真正从后端获取数据，我们先要在后端数据库中添加一些数据，而这对 Django 来说就非常方便了。进入 api 目录，运行
        `python manage.py runserver`
        打开服务器，然后进入后台管理页面（[http://localhost:8000/admin](http://localhost:8000/admin)），添加一些数据：


        ![](tuture-assets/add-data-in-admin.jpg)


        再运行前端页面，可以看到我们刚刚在 Django 后台管理中添加的项目：


        ![](tuture-assets/recipe-list.jpg)
  - name: 实现食谱的编辑和创建页面
    commit: 5f1edd9
    diff:
      - file: client/pages/recipes/_id/edit.vue
        display: true
        explain:
          post: |-
            实现之后的页面如下：

            ![](tuture-assets/recipe-detail.jpg)
      - file: client/pages/recipes/add.vue
        display: true
        explain:
          post: |-
            实现的页面如下：

            ![](tuture-assets/add-recipe.jpg)
      - file: client/static/images/placeholder.png
        display: false
    explain:
      pre: >-
        有了前面的铺垫，实现食谱的添加和删除也基本上是按部就班了。我们在 pages/recipes/_id 中分别实现
        `edit.vue`（食谱编辑页面） 和 `add.vue` （创建食谱页面）如下。
  - name: 一点强迫症：全局页面跳转效果
    commit: 04edf4c
    diff:
      - file: client/assets/css/transition.css
        display: true
        explain:
          pre: 首先在 assets 目录中创建 css 目录，并在其中添加 transition.css 文件，代码如下：
      - file: client/nuxt.config.js
        display: true
        explain:
          pre: 在 Nuxt 配置文件中将刚才写的 transition.css 中添加到全局 CSS 中：
      - file: tuture.yml
    explain:
      pre: 在这一节中，我们将演示如何在 Nuxt 中添加全局样式文件，来实现前端页面之间的跳转效果。
      post: 欧耶，一个具有完整增删改查功能、实现了前后端分离的美食分享网站就完成了！
description: >-
  Django 作为 Python 社区最受欢迎的 Web 框架之一，凭借其高度抽象的组件和强大方便的脚手架，将快速且流畅的开发体验演绎到了极致。而 Nuxt
  作为从 Vue.js 进化而来的前端框架，能够轻松胜任复杂的 SPA（单页应用）开发。两者相遇，能够擦出怎样的火花？这篇教程将用 Django + Nuxt
  实现带有完整的增删改查（CRUD）功能的全栈应用。最后郑重警告：不要在深夜阅读此教程！！！
